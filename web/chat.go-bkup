package main

import (
  "fmt"
  "github.com/garyburd/redigo/redis"
  "encoding/json"
)

type ChatRoom struct {
  Id int
  Messages []*message
}

func newChat() (c *chat, err error) {
  id, err := redis.Int(rConn.Do("INCR", "idx:chats"))
  if err != nil {
    return
  }
  c = &chat {
    Id: id,
    Messages: nil,
  }
  err = c.save()
  if err != nil {
    return
  }
  return
}

func getChat(id int) (c *chat, err error) {
  var m []*message
  chatId := fmt.Sprintf("chat:%v", id)
  res, err := redis.String(rConn.Do("GET", chatId))
  if err != nil {
    return
  }
  err = json.Unmarshal([]byte(res), &m)
  if err != nil {
    return
  }
  c = &chat {
    Id: id,
    Messages: m,
  }
  return
}

func (c *chat) save() (err error) {
  b, err := json.Marshal(c.Messages)
  if err != nil {
    return
  }
  chatId := fmt.Sprintf("chat:%v", c.Id)
  _, err = rConn.Do("SET", chatId, b)
  if err != nil {
    return err
  }
  return
}

func (c *chat) addMessage(m *message) (err error) {
  c.Messages = append(c.Messages, m)
  err = c.save()
  if err != nil {
    return
  }
  return
}
